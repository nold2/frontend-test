{"version":3,"sources":["services/locationService.js","containers/FormPage.js","containers/HomePage.js","containers/App.js","serviceWorker.js","index.js"],"names":["locationService","getGeolocation","sucess","fail","window","navigator","geolocation","getCurrentPosition","getReverseGeocoding","lat","lng","axios","get","concat","process","REACT_APP_LOCATION_API","getProvince","getCities","id","getDistricts","getSubDistricts","CustomSelect","lazy","Promise","all","__webpack_require__","e","then","bind","FormPage","state","provinces","selectedProvince","label","value","cities","selectedCity","districts","selectedDistrict","subDistricts","selectedSubDistrics","getProvinces","data","map","province","name","city","district","subdistricts","subdistrict","handleChange","selected","_this","setState","Object","defineProperty","this","prevProps","prevState","_this$state","react_default","a","createElement","react","fallback","options","isLoading","length","isDisabled","Component","HomePage","position","error","getLocationSuccess","coords","latitude","longitude","getLocationFail","JSON","parse","stringify","location","console","log","App","Switch","Route","path","component","exact","Boolean","hostname","match","ReactDOM","render","HashRouter","basename","containers_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.83c81568.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default {\n\tgetGeolocation,\n\tgetReverseGeocoding,\n\tgetProvince,\n\tgetCities,\n\tgetDistricts,\n\tgetSubDistricts\n}\n\nfunction getGeolocation(sucess, fail) {\n\twindow.navigator.geolocation.getCurrentPosition(sucess, fail)\n}\n\nfunction getReverseGeocoding(lat, lng) {\n\treturn axios.get(`https://us1.locationiq.com/v1/reverse.php?key=${process.env.REACT_APP_LOCATION_API}&lat=${lat}&lon=${lng}&format=json`)\n}\n\nfunction getProvince() {\n\treturn axios.get('https://danacita.co.id/api/locations/v1/provinces')\n}\n\nfunction getCities(id){\n\treturn axios.get(`https://danacita.co.id/api/locations/v1/cities?province_id=${id}`)\n}\nfunction getDistricts(id){\n\treturn axios.get(`https://danacita.co.id/api/locations/v1/districts?city_id=${id}`)\n}\nfunction getSubDistricts(id){\n\treturn axios.get(`https://danacita.co.id/api/locations/v1/subdistricts?district_id=${id}`)\n}","import React, { Component, lazy, Suspense } from 'react';\nimport locationService from '../services/locationService';\n//Lazy load CustomSelect components https://reactjs.org/blog/2018/10/23/react-v-16-6.html\nconst CustomSelect = lazy(() => import('../components/CustomSelect') );\n\nclass FormPage extends Component {\n\tstate ={\n\t\tprovinces: [],\n\t\tselectedProvince: { label: '', value: 0 },\n\n\t\tcities: [],\n\t\tselectedCity: { label: '', value: 0 },\n\n\t\tdistricts: [],\n\t\tselectedDistrict: { label: '', value: 0 },\n\n\t\tsubDistricts: [],\n\t\tselectedSubDistrics: { label: '', value: 0 },\n\t};\n\n\tasync componentDidMount() {\n\t\t//Get the province and set it to state\n\t\tconst provinces = await this.getProvinces();\n\t\tthis.setState({ provinces });\n\t}\n\n\tasync componentDidUpdate(prevProps, prevState) {\n\t\t//If the user change the province, get the cities and reset the selected city, districts and subdistricts\n\t\tif(prevState.selectedProvince.value !== this.state.selectedProvince.value){\n\t\t\tconst cities =  await this.getCities(this.state.selectedProvince.value);\n\t\t\tthis.setState({\n\t\t\t\tcities,\n\t\t\t\tselectedCity: { label: '', value: 0 },\n\t\t\t\tselectedDistrict: { label: '', value: 0 },\n\t\t\t\tselectedSubDistrics: { label: '', value: 0 }\n\t\t\t});\n\t\t}\n\n\t\tif(prevState.selectedCity.value !== this.state.selectedCity.value){\n\t\t\t//If the user change the city, get the districts and reset the selected districts and subdistricts\n\t\t\tconst districts =  await  this.getDistricts(this.state.selectedCity.value);\n\t\t\tthis.setState({\n\t\t\t\tdistricts,\n\t\t\t\tselectedDistrict: { label: '', value: 0 },\n\t\t\t\tselectedSubDistrics: { label: '', value: 0 }\n\t\t\t});\n\t\t}\n\n\t\tif(prevState.selectedDistrict.value !== this.state.selectedDistrict.value){\n\t\t\t//If the user change the district, get the cities and reset the selected subdistricts\n\t\t\tconst subDistricts =  await this.getSubDistricts(this.state.selectedDistrict.value);\n\t\t\tthis.setState({\n\t\t\t\tsubDistricts,\n\t\t\t\tselectedSubDistrics: { label: '', value: 0 }\n\t\t\t});\n\t\t}\n\t}\n\n\tgetProvinces = () => {\n\t\treturn locationService.getProvince().then(data =>\n\t\t\tdata.data.provinces.map(province => ({\n\t\t\t\tlabel: province.name,\n\t\t\t\tvalue: province.id\n\t\t\t}))\n\t\t);\n\t};\n\n\tgetCities = (id) => {\n\t\treturn locationService.getCities(id).then(data =>\n\t\t\tdata.data.cities.map(city => ({\n\t\t\t\tlabel: city.name,\n\t\t\t\tvalue: city.id\n\t\t\t}))\n\t\t);\n\t};\n\n\tgetDistricts = (id) => {\n\t\treturn locationService.getDistricts(id).then(data =>\n\t\t\tdata.data.districts.map(district => ({\n\t\t\t\tlabel: district.name,\n\t\t\t\tvalue: district.id\n\t\t\t}))\n\t\t);\n\t};\n\n\tgetSubDistricts = (id) => {\n\t\treturn locationService.getSubDistricts(id).then(data =>\n\t\t\tdata.data.subdistricts.map(subdistrict => ({\n\t\t\t\tlabel: subdistrict.name,\n\t\t\t\tvalue: subdistrict.id\n\t\t\t}))\n\t\t);\n\t};\n\n\thandleChange = selected => value => {\n\t\tthis.setState({ [selected]: value })\n\t};\n\n\n\trender() {\n\t\tconst {\n\t\t\tprovinces,\n\t\t\tcities,\n\t\t\tdistricts,\n\t\t\tsubDistricts,\n\t\t\tselectedProvince,\n\t\t\tselectedCity,\n\t\t\tselectedDistrict,\n\t\t\tselectedSubDistrics\n\t\t} = this.state;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Suspense fallback={<div>Loading...</div>}>\n\t\t\t\t\t<CustomSelect\n\t\t\t\t\t\tlabel={\"Province\"}\n\t\t\t\t\t\tvalue={selectedProvince}\n\t\t\t\t\t\toptions={provinces}\n\t\t\t\t\t\thandleChange={this.handleChange('selectedProvince')}\n\t\t\t\t\t\tisLoading={provinces.length === 0}\n\t\t\t\t\t\tisDisabled={false}\n\t\t\t\t\t/>\n\t\t\t\t\t<CustomSelect\n\t\t\t\t\t\tlabel={\"Cities\"}\n\t\t\t\t\t\tvalue={selectedCity}\n\t\t\t\t\t\toptions={cities}\n\t\t\t\t\t\thandleChange={this.handleChange('selectedCity')}\n\t\t\t\t\t\tisLoading={cities.length === 0}\n\t\t\t\t\t\tisDisabled={!selectedProvince.value}\n\t\t\t\t\t/>\n\t\t\t\t\t<CustomSelect\n\t\t\t\t\t\tlabel={\"Districts\"}\n\t\t\t\t\t\tvalue={selectedDistrict}\n\t\t\t\t\t\toptions={districts}\n\t\t\t\t\t\thandleChange={this.handleChange('selectedDistrict')}\n\t\t\t\t\t\tisLoading={districts.length === 0}\n\t\t\t\t\t\tisDisabled={!selectedCity.value}\n\t\t\t\t\t/>\n\t\t\t\t\t<CustomSelect\n\t\t\t\t\t\tlabel={\"SubDistricts\"}\n\t\t\t\t\t\tvalue={selectedSubDistrics}\n\t\t\t\t\t\toptions={subDistricts}\n\t\t\t\t\t\thandleChange={this.handleChange('selectedSubDistrics')}\n\t\t\t\t\t\tisLoading={subDistricts.length === 0}\n\t\t\t\t\t\tisDisabled={!selectedDistrict.value}\n\t\t\t\t\t/>\n\t\t\t\t</Suspense>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default FormPage;\n","import React, {Component} from 'react';\nimport locationService from '../services/locationService';\n\nclass HomePage extends Component {\n\tstate = {\n\t\tposition: {},\n\t\terror: '',\n\t};\n\n\tasync componentDidMount() {\n\t\tawait locationService.getGeolocation(this.getLocationSuccess, this.getLocationFail);\n\t}\n\n\tasync componentDidUpdate(prevProps, prevState) {\n\t\tif(JSON.parse(JSON.stringify(prevState.position)) !== JSON.parse(JSON.stringify(this.state.position))){\n\t\t\tconst location = await locationService.getReverseGeocoding(this.state.position.lat, this.state.position.lng)\n\t\t\tconsole.log('location: ', location);\n\t\t}\n\t}\n\n\n\tgetLocationSuccess = position => {\n\t\tthis.setState({ position: {lat: position.coords.latitude, lng: position.coords.longitude } })\n\t};\n\n\tgetLocationFail = error => {\n\t\tthis.setState({ error })\n\t};\n\n\trender() {\n\t\tconst { position } = this.state;\n\t\tif(position.lat && position.lng){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\tThis is your location {position.lat}, {position.lng}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn <div />\n\t}\n}\n\nexport default HomePage;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport FormPage from './FormPage';\nimport HomePage from './HomePage';\n\nconst App = () => (\n\t<Switch>\n\t\t<Route  path=\"/\" component={FormPage} exact />\n\t\t<Route path=\"/home\" component={HomePage} exact />\n\t</Switch>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n\t<Router basename={process.env.PUBLIC_URL}>\n\t\t<App />\n\t</Router>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}