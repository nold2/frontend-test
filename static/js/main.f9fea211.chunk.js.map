{"version":3,"sources":["actionTypes/locationActionTypes.js","reducers/locationReducer.js","reducers/rootReducer.js","store.js","services/locationService.js","actions/locationActions.js","components/CustomSelect.js","helpers/validation.js","components/RegistrationForm.js","containers/RegistrationPage.js","containers/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["locationActionTypes","GET_PROVINCES_REQUEST","GET_PROVINCES_SUCCESS","GET_PROVINCES_FAIL","GET_CITIES_REQUEST","GET_CITIES_SUCCESS","GET_CITIES_FAIL","GET_DISTRICTS_REQUEST","GET_DISTRICTS_SUCCESS","GET_DISTRICTS_FAIL","GET_SUB_DISTRICTS_REQUEST","GET_SUB_DISTRICTS_SUCCESS","GET_SUB_DISTRICTS_FAIL","defaultState","provinces","cities","districts","subDistricts","isLoading","isError","error","combineReducers","form","formReducer","location","state","arguments","length","undefined","action","type","Object","objectSpread","payload","middleware","thunk","logger","createStore","reducers","composeWithDevTools","applyMiddleware","apply","locationService","getGeolocation","sucess","fail","window","navigator","geolocation","getCurrentPosition","getReverseGeocoding","lat","lng","axios","get","concat","process","REACT_APP_LOCATION_API","getProvince","getCities","id","getDistricts","getSubDistricts","locationActions","getProvinces","dispatch","then","res","data","map","province","label","name","value","success","err","city","district","subdistricts","subdistrict","CustomSelect","React","memo","_ref","_ref$input","input","onChange","_ref$meta","meta","touched","options","isDisabled","react_default","a","createElement","react_select_esm","style","color","fontSize","defaultProps","requiredInput","RegistrationForm","handleSubmit","selectedProvince","selectedCity","selectedDistrict","onSubmit","Field","component","validate","marginTop","width","height","borderRadius","reduxForm","mapDispatchToProps","FormPage","values","console","log","selectedSubDistric","this","props","prevProps","_this$props","components_RegistrationForm","selectedSubDistrics","Component","connect","formValueSelector","HomePage","position","getLocationSuccess","_this","setState","coords","latitude","longitude","getLocationFail","prevState","JSON","parse","stringify","App","es","store","Switch","Route","path","exact","Boolean","hostname","match","ReactDOM","render","HashRouter","basename","src_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9fea211.chunk.js","sourcesContent":["export default {\n\tGET_PROVINCES_REQUEST: 'GET_PROVINCES_REQUEST',\n\tGET_PROVINCES_SUCCESS: 'GET_PROVINCES_SUCCESS',\n\tGET_PROVINCES_FAIL: 'GET_PROVINCES_FAIL',\n\n\tGET_CITIES_REQUEST: 'GET_CITIES_REQUEST',\n\tGET_CITIES_SUCCESS: 'GET_CITIES_SUCCESS',\n\tGET_CITIES_FAIL: 'GET_CITIES_FAIL',\n\n\tGET_DISTRICTS_REQUEST: 'GET_DISTRICTS_REQUEST',\n\tGET_DISTRICTS_SUCCESS: 'GET_DISTRICTS_SUCCESS',\n\tGET_DISTRICTS_FAIL: 'GET_DISTRICTS_FAIL',\n\n\tGET_SUB_DISTRICTS_REQUEST: 'GET_SUB_DISTRICTS_REQUEST',\n\tGET_SUB_DISTRICTS_SUCCESS: 'GET_SUB_DISTRICTS_SUCCESS',\n\tGET_SUB_DISTRICTS_FAIL: 'GET_SUB_DISTRICTS_FAIL'\n}","import locationActionTypes from '../actionTypes/locationActionTypes';\n\nconst defaultState = {\n\tprovinces: [],\n\tcities: [],\n\tdistricts: [],\n\tsubDistricts: [],\n\tisLoading: false,\n\tisError: false,\n\terror: '',\n};\n\nexport default (state = defaultState, action) =>{\n\tswitch (action.type){\n\t\tcase locationActionTypes.GET_PROVINCES_REQUEST:\n\t\tcase locationActionTypes.GET_CITIES_REQUEST:\n\t\tcase locationActionTypes.GET_DISTRICTS_REQUEST:\n\t\tcase locationActionTypes.GET_SUB_DISTRICTS_REQUEST:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: true\n\t\t\t};\n\t\tcase locationActionTypes.GET_PROVINCES_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tprovinces: action.payload,\n\t\t\t\tisLoading: false\n\t\t\t};\n\t\tcase locationActionTypes.GET_CITIES_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcities: action.payload,\n\t\t\t\tisLoading: false\n\t\t\t};\n\t\tcase locationActionTypes.GET_DISTRICTS_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tdistricts: action.payload,\n\t\t\t\tisLoading: false\n\t\t\t};\n\t\tcase locationActionTypes.GET_SUB_DISTRICTS_SUCCESS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tsubDistricts: action.payload,\n\t\t\t\tisLoading: false\n\t\t\t};\n\t\tcase locationActionTypes.GET_PROVINCES_FAIL:\n\t\tcase locationActionTypes.GET_CITIES_FAIL:\n\t\tcase locationActionTypes.GET_DISTRICTS_FAIL:\n\t\tcase locationActionTypes.GET_SUB_DISTRICTS_FAIL:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisLoading: false,\n\t\t\t\tisError: true,\n\t\t\t\terror: action.payload\n\t\t\t};\n\t\tdefault: return state\n\t}\n}","import { combineReducers } from 'redux';\nimport locationReducer from './locationReducer';\nimport { reducer as formReducer } from 'redux-form';\n\nexport default combineReducers({\n\tform: formReducer,\n\tlocation: locationReducer\n});","import { createStore, applyMiddleware } from 'redux';\nimport logger  from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducers from './reducers/rootReducer';\n\nconst middleware = [\n\tthunk,\n\tlogger\n];\n\nexport default createStore(\n\t\treducers,\n\t\tcomposeWithDevTools(\n\t\t\tapplyMiddleware(...middleware)\n\t\t)\n);","import axios from 'axios';\n\nexport default {\n\tgetGeolocation,\n\tgetReverseGeocoding,\n\tgetProvince,\n\tgetCities,\n\tgetDistricts,\n\tgetSubDistricts\n}\n\nfunction getGeolocation(sucess, fail) {\n\twindow.navigator.geolocation.getCurrentPosition(sucess, fail)\n}\n\nfunction getReverseGeocoding(lat, lng) {\n\treturn axios.get(`https://us1.locationiq.com/v1/reverse.php?key=${process.env.REACT_APP_LOCATION_API}&lat=${lat}&lon=${lng}&format=json`)\n}\n\nfunction getProvince() {\n\treturn axios.get('https://danacita.co.id/api/locations/v1/provinces')\n}\n\nfunction getCities(id){\n\treturn axios.get(`https://danacita.co.id/api/locations/v1/cities?province_id=${id}`)\n}\nfunction getDistricts(id){\n\treturn axios.get(`https://danacita.co.id/api/locations/v1/districts?city_id=${id}`)\n}\nfunction getSubDistricts(id){\n\treturn axios.get(`https://danacita.co.id/api/locations/v1/subdistricts?district_id=${id}`)\n}","import locationService from '../services/locationService';\nimport locationActionTypes from '../actionTypes/locationActionTypes';\n\nexport default {\n\tgetProvinces,\n\tgetCities,\n\tgetDistricts,\n\tgetSubDistricts\n}\n\nfunction getProvinces(){\n\tconst request = () => ({\n\t\ttype: locationActionTypes.GET_PROVINCES_REQUEST\n\t});\n\n\tconst success = provinces => ({\n\t\ttype: locationActionTypes.GET_PROVINCES_SUCCESS,\n\t\tpayload: provinces\n\t});\n\n\tconst fail = error => ({\n\t\ttype: locationActionTypes.GET_PROVINCES_FAIL,\n\t\tpayload: error,\n\t\terror: true\n\t});\n\n\treturn dispatch => {\n\t\tdispatch(request());\n\t\treturn locationService.getProvince().then(\n\t\t\tres=>{\n\t\t \tconst provinces = res.data.provinces.map(province => ({\n\t\t\t\t\tlabel: province.name,\n\t\t\t\t\tvalue: province.id\n\t\t\t}));\n\t\t \tdispatch(success(provinces))\n\t\t },\n\t\t\terr=>{\n\t\t \t  dispatch(fail(err))\n\t\t })\n\t}\n}\n\nfunction getCities(id){\n\tconst request = () => ({\n\t\ttype: locationActionTypes.GET_CITIES_REQUEST\n\t});\n\n\tconst success = cities => ({\n\t\ttype: locationActionTypes.GET_CITIES_SUCCESS,\n\t\tpayload: cities\n\t});\n\n\tconst fail = error => ({\n\t\ttype: locationActionTypes.GET_CITIES_FAIL,\n\t\tpayload: error,\n\t\terror: true\n\t});\n\n\treturn dispatch => {\n\t\tdispatch(request());\n\t\treturn locationService.getCities(id).then(\n\t\t\tres=>{\n\t\t \tconst cities = res.data.cities.map(city => ({\n\t\t\t\t\tlabel: city.name,\n\t\t\t\t\tvalue: city.id\n\t\t\t}));\n\t\t \tdispatch(success(cities))\n\t\t },\n\t\t\terr=>{\n\t\t \t  dispatch(fail(err))\n\t\t })\n\t}\n}\n\nfunction getDistricts(id){\n\tconst request = () => ({\n\t\ttype: locationActionTypes.GET_DISTRICTS_REQUEST\n\t});\n\n\tconst success = districts => ({\n\t\ttype: locationActionTypes.GET_DISTRICTS_SUCCESS,\n\t\tpayload: districts\n\t});\n\n\tconst fail = error => ({\n\t\ttype: locationActionTypes.GET_DISTRICTS_FAIL,\n\t\tpayload: error,\n\t\terror: true\n\t});\n\n\treturn dispatch => {\n\t\tdispatch(request());\n\t\treturn locationService.getDistricts(id).then(\n\t\t\tres=>{\n\t\t\t\tconst districts = res.data.districts.map(district => ({\n\t\t\t\t\tlabel: district.name,\n\t\t\t\t\tvalue: district.id\n\t\t\t\t}));\n\t\t\t\tdispatch(success(districts))\n\t\t\t},\n\t\t\terr=>{\n\t\t\t\tdispatch(fail(err))\n\t\t\t})\n\t}\n}\n\nfunction getSubDistricts(id){\n\tconst request = () => ({\n\t\ttype: locationActionTypes.GET_SUB_DISTRICTS_REQUEST\n\t});\n\n\tconst success = subdistricts => ({\n\t\ttype: locationActionTypes.GET_SUB_DISTRICTS_SUCCESS,\n\t\tpayload: subdistricts\n\t});\n\n\tconst fail = error => ({\n\t\ttype: locationActionTypes.GET_SUB_DISTRICTS_FAIL,\n\t\tpayload: error,\n\t\terror: true\n\t});\n\n\treturn dispatch => {\n\t\tdispatch(request());\n\t\treturn locationService.getSubDistricts(id).then(\n\t\t\tres=>{\n\t\t\t\tconst subdistricts = res.data.subdistricts.map(subdistrict => ({\n\t\t\t\t\tlabel: subdistrict.name,\n\t\t\t\t\tvalue: subdistrict.id\n\t\t\t\t}));\n\t\t\t\tdispatch(success(subdistricts))\n\t\t\t},\n\t\t\terr=>{\n\t\t\t\tdispatch(fail(err))\n\t\t\t})\n\t}\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\n\nconst CustomSelect = React.memo(({\n\t                      input: { value, onChange },\n\t                      meta:{ touched, error },\n\t                      label, options, isLoading, isDisabled\n}) => {\n\treturn (\n\t\t<div>\n\t\t\t<h3>{label}</h3>\n\t\t\t<Select\n\t\t\t\tvalue={value}\n\t\t\t\tisDisabled={isDisabled}\n\t\t\t\toptions={options}\n\t\t\t\tonChange={onChange}\n\t\t\t\tisLoading={isLoading}\n\t\t\t/>\n\t\t\t{touched && !!error && <p style={{ color: 'red', fontSize: '12px' }}>{error}</p>}\n\t\t</div>\n\t);\n});\n\nCustomSelect.defaultProps = {\n\tlabel: 'forms',\n\toptions: [{ label: '', value: 0 }],\n\tisLoading: true,\n\tisDisabled: true\n};\n\nCustomSelect.propTypes = {\n\tlabel: PropTypes.string.isRequired,\n\tvalue: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\tvalue: PropTypes.number\n\t}),\n\tisDisabled: PropTypes.bool.isRequired,\n\toptions: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tlabel: PropTypes.string,\n\t\t\tvalue: PropTypes.number\n\t\t}).isRequired\n\t),\n\tisLoading: PropTypes.bool,\n};\n\n//Use React.memo to ensure no rerenders unless a prop has changed\nexport default React.memo(CustomSelect);\n","export const requiredInput = value => {\n\treturn value ? undefined : 'Please fill in this section'\n};","import React from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport PropTypes from 'prop-types';\nimport CustomSelect from '../components/CustomSelect';\nimport { requiredInput } from \"../helpers/validation\";\n\n\nconst RegistrationForm = ({ handleSubmit, provinces, cities, districts, subDistricts, selectedProvince, selectedCity, selectedDistrict }) => {\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<Field\n\t\t\t\tname=\"province\"\n\t\t\t\tcomponent={CustomSelect}\n\t\t\t\tlabel={\"Province*\"}\n\t\t\t\toptions={provinces}\n\t\t\t\tisLoading={provinces.length === 0}\n\t\t\t\tisDisabled={false}\n\t\t\t\tvalidate={requiredInput}\n\t\t\t/>\n\t\t\t<Field\n\t\t\t\tname=\"city\"\n\t\t\t\tcomponent={CustomSelect}\n\t\t\t\tlabel={\"Cities*\"}\n\t\t\t\toptions={cities}\n\t\t\t\tisLoading={cities.length === 0}\n\t\t\t\tisDisabled={!selectedProvince.value}\n\t\t\t\tvalidate={requiredInput}\n\t\t\t/>\n\t\t\t<Field\n\t\t\t\tname=\"district\"\n\t\t\t\tcomponent={CustomSelect}\n\t\t\t\tlabel={\"District*\"}\n\t\t\t\toptions={districts}\n\t\t\t\tisLoading={districts.length === 0}\n\t\t\t\tisDisabled={!selectedCity.value}\n\t\t\t\tvalidate={requiredInput}\n\t\t\t/>\n\t\t\t<Field\n\t\t\t\tname=\"subdistrict\"\n\t\t\t\tcomponent={CustomSelect}\n\t\t\t\tlabel={\"Sub-District*\"}\n\t\t\t\toptions={subDistricts}\n\t\t\t\tisLoading={subDistricts.length === 0}\n\t\t\t\tisDisabled={!selectedDistrict.value}\n\t\t\t\tvalidate={requiredInput}\n\t\t\t/>\n\t\t\t<button\n\t\t\t\ttype=\"submit\"\n\t\t\t\tstyle={{\n\t\t\t\t\tmarginTop: '16px',\n\t\t\t\t\twidth: '70px',\n\t\t\t\t\theight: '30px',\n\t\t\t\t\tborderRadius: '8px'\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\tSubmit\n\t\t\t</button>\n\t\t</form>\n\t);\n};\n\nRegistrationForm.defaultProps = {\n\tprovinces: [{ label: '', value: 0 }],\n\tcities: [{ label: '', value: 0 }],\n\tdistricts: [{ label: '', value: 0 }],\n\tsubDistricts: [{ label: '', value: 0 }],\n\n\tselectedProvince: { label: '', value: 0 },\n\tselectedCity: { label: '', value: 0 },\n\tselectedDistrict: { label: '', value: 0 }\n};\n\nRegistrationForm.propTypes = {\n\thandleSubmit: PropTypes.func.isRequired,\n\n\tprovinces: PropTypes.array.isRequired,\n\tcities: PropTypes.array.isRequired,\n\tdistricts: PropTypes.array.isRequired,\n\tsubDistricts: PropTypes.array.isRequired,\n\n\tselectedProvince: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\tvalue: PropTypes.number\n\t}),\n\tselectedCity: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\tvalue: PropTypes.number\n\t}),\n\tselectedDistrict: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\tvalue: PropTypes.number\n\t})\n};\n\nexport default reduxForm({ form: 'RegistrationForm'})(RegistrationForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { formValueSelector } from 'redux-form';\nimport get from 'lodash.get';\nimport locationActions from '../actions/locationActions'\nimport RegistrationForm from '../components/RegistrationForm';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tprovinces: state.location.provinces,\n\t\tcities: state.location.cities,\n\t\tdistricts: state.location.districts,\n\t\tsubDistricts: state.location.subDistricts,\n\n\t\tselectedProvince: formValueSelector('RegistrationForm')(state, 'province'),\n\t\tselectedCity: formValueSelector('RegistrationForm')(state, 'city'),\n\t\tselectedDistrict: formValueSelector('RegistrationForm')(state, 'district'),\n\t\tselectedSubDistric: formValueSelector('RegistrationForm')(state, 'subdistrict'),\n\t}\n};\n\nconst mapDispatchToProps =  {\n\tgetProvinces: locationActions.getProvinces,\n\tgetCities: locationActions.getCities,\n\tgetDistricts: locationActions.getDistricts,\n\tgetSubDistricts: locationActions.getSubDistricts\n};\n\nclass FormPage extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.getProvinces()\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif(get(prevProps, 'selectedProvince.value') !== get(this.props, 'selectedProvince.value')){\n\t\t\tthis.props.getCities(this.props.selectedProvince.value);\n\t\t}\n\n\t\tif(get(prevProps, 'selectedCity.value') !== get(this.props, 'selectedCity.value')){\n\t\t\tthis.props.getDistricts(this.props.selectedCity.value);\n\t\t}\n\n\t\tif(get(prevProps, 'selectedDistrict.value') !== get(this.props, 'selectedDistrict.value')){\n\t\t\tthis.props.getSubDistricts(this.props.selectedDistrict.value)\n\t\t}\n\t}\n\n\thandleSubmit = values => {\n\t\tconsole.log({\n\t\t\tselectedProvince: values.province.label,\n\t\t\tselectedCity: values.city.label,\n\t\t\tselectedDistrict: values.district.label,\n\t\t\tselectedSubDistric: values.subdistrict.label\n\t\t})\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\tprovinces,\n\t\t\tcities,\n\t\t\tdistricts,\n\t\t\tsubDistricts,\n\t\t\tselectedProvince,\n\t\t\tselectedCity,\n\t\t\tselectedDistrict,\n\t\t\tselectedSubDistric\n\t\t} = this.props;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<RegistrationForm\n\t\t\t\t\tprovinces={provinces}\n\t\t\t\t\tcities={cities}\n\t\t\t\t\tdistricts={districts}\n\t\t\t\t\tsubDistricts={subDistricts}\n\t\t\t\t\tselectedProvince={selectedProvince}\n\t\t\t\t\tselectedCity={selectedCity}\n\t\t\t\t\tselectedDistrict={selectedDistrict}\n\t\t\t\t\tselectedSubDistrics={selectedSubDistric}\n\t\t\t\t\tonSubmit={this.handleSubmit}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormPage);\n","import React, {Component} from 'react';\nimport locationService from '../services/locationService';\n\nclass HomePage extends Component {\n\tstate = {\n\t\tposition: {},\n\t\terror: '',\n\t};\n\n\tasync componentDidMount() {\n\t\tawait locationService.getGeolocation(this.getLocationSuccess, this.getLocationFail);\n\t}\n\n\tasync componentDidUpdate(prevProps, prevState) {\n\t\tif(JSON.parse(JSON.stringify(prevState.position)) !== JSON.parse(JSON.stringify(this.state.position))){\n\t\t\tconst location = await locationService.getReverseGeocoding(this.state.position.lat, this.state.position.lng)\n\t\t\tconsole.log('location: ', location);\n\t\t}\n\t}\n\n\n\tgetLocationSuccess = position => {\n\t\tthis.setState({ position: {lat: position.coords.latitude, lng: position.coords.longitude } })\n\t};\n\n\tgetLocationFail = error => {\n\t\tthis.setState({ error })\n\t};\n\n\trender() {\n\t\tconst { position } = this.state;\n\t\tif(position.lat && position.lng){\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\tThis is your location {position.lat}, {position.lng}\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn <div />\n\t}\n}\n\nexport default HomePage;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport FormPage from './containers/RegistrationPage';\nimport HomePage from './containers/HomePage';\n\nconst App = () => (\n\t<Provider store={store}>\n\t\t<Switch>\n\t\t\t<Route  path=\"/\" component={FormPage} exact />\n\t\t\t<Route path=\"/home\" component={HomePage} exact />\n\t\t</Switch>\n\t</Provider>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n\t<Router basename={process.env.PUBLIC_URL}>\n\t\t<App />\n\t</Router>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}