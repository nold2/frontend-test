{"version":3,"sources":["services/locationService.js","Containers/App.js","serviceWorker.js","index.js"],"names":["locationService","getLocation","window","navigator","geolocation","getCurrentPosition","position","console","log","error","getProvince","axios","get","getCities","id","concat","getDistricts","getSubDistricts","CustomSelect","lazy","Promise","all","__webpack_require__","e","then","bind","App","state","provinces","selectedProvince","label","value","cities","selectedCity","districts","selectedDistrict","subDistricts","selectedSubDistrics","getProvinces","data","map","province","name","city","district","subdistricts","subdistrict","handleChange","selected","_this","setState","Object","defineProperty","this","prevProps","prevState","_this$state","react_default","a","createElement","react","fallback","options","isLoading","length","isDisabled","Component","Boolean","location","hostname","match","ReactDOM","render","Containers_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6b624c7e.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default {\n\tgetLocation,\n\tgetProvince,\n\tgetCities,\n\tgetDistricts,\n\tgetSubDistricts\n}\n\nfunction getLocation() {\n\tconst sucess = position => {\n\t\treturn console.log(position)\n\t};\n\n\tconst fail = error => {\n\t\treturn console.error(error)\n\t};\n\n\twindow.navigator.geolocation.getCurrentPosition(sucess, fail)\n}\n\nfunction getProvince() {\n\treturn axios.get('https://danacita.co.id/api/locations/v1/provinces')\n}\n\nfunction getCities(id){\n\treturn axios.get(`https://danacita.co.id/api/locations/v1/cities?province_id=${id}`)\n}\nfunction getDistricts(id){\n\treturn axios.get(`https://danacita.co.id/api/locations/v1/districts?city_id=${id}`)\n}\nfunction getSubDistricts(id){\n\treturn axios.get(`https://danacita.co.id/api/locations/v1/subdistricts?district_id=${id}`)\n}","import React, { Component, lazy, Suspense } from 'react';\nimport locationService from '../services/locationService';\n//Lazy load CustomSelect components https://reactjs.org/blog/2018/10/23/react-v-16-6.html\nconst CustomSelect = lazy(() => import('../Components/CustomSelect') );\n\nclass App extends Component {\n  state ={\n    provinces: [],\n    selectedProvince: { label: '', value: 0 },\n\n    cities: [],\n\t  selectedCity: { label: '', value: 0 },\n\n    districts: [],\n    selectedDistrict: { label: '', value: 0 },\n\n    subDistricts: [],\n    selectedSubDistrics: { label: '', value: 0 },\n  };\n\n\tasync componentDidMount() {\n\t\t//Get the province and set it to state\n   const provinces = await this.getProvinces();\n   this.setState({ provinces });\n\t}\n\n\tasync componentDidUpdate(prevProps, prevState) {\n\t\t//If the user change the province, get the cities and reset the selected city, districts and subdistricts\n    if(prevState.selectedProvince.value !== this.state.selectedProvince.value){\n\t    const cities =  await this.getCities(this.state.selectedProvince.value);\n\t    this.setState({\n\t\t    cities,\n\t\t    selectedCity: { label: '', value: 0 },\n\t\t    selectedDistrict: { label: '', value: 0 },\n\t\t    selectedSubDistrics: { label: '', value: 0 }\n\t    });\n    }\n\n\t\tif(prevState.selectedCity.value !== this.state.selectedCity.value){\n\t\t\t//If the user change the city, get the districts and reset the selected districts and subdistricts\n\t\t\tconst districts =  await  this.getDistricts(this.state.selectedCity.value);\n\t\t\tthis.setState({\n\t\t\t\tdistricts,\n\t\t\t\tselectedDistrict: { label: '', value: 0 },\n\t\t\t\tselectedSubDistrics: { label: '', value: 0 }\n\t\t\t});\n\t\t}\n\n\t\tif(prevState.selectedDistrict.value !== this.state.selectedDistrict.value){\n\t\t\t//If the user change the district, get the cities and reset the selected subdistricts\n\t\t\tconst subDistricts =  await this.getSubDistricts(this.state.selectedDistrict.value);\n\t\t\tthis.setState({\n\t\t\t\tsubDistricts,\n\t\t\t\tselectedSubDistrics: { label: '', value: 0 }\n\t\t\t});\n\t\t}\n\t}\n\n\tgetProvinces = () => {\n\t\treturn locationService.getProvince().then(data =>\n\t\t\tdata.data.provinces.map(province => ({\n\t\t\t\tlabel: province.name,\n\t\t\t\tvalue: province.id\n\t\t\t}))\n\t\t);\n  };\n\n\tgetCities = (id) => {\n\t  return locationService.getCities(id).then(data =>\n\t\t  data.data.cities.map(city => ({\n\t\t\t  label: city.name,\n\t\t\t  value: city.id\n\t\t  }))\n\t  );\n  };\n\n\tgetDistricts = (id) => {\n\t\treturn locationService.getDistricts(id).then(data =>\n\t\t\tdata.data.districts.map(district => ({\n\t\t\t\tlabel: district.name,\n\t\t\t\tvalue: district.id\n\t\t\t}))\n\t\t);\n  };\n\n\tgetSubDistricts = (id) => {\n\t  return locationService.getSubDistricts(id).then(data =>\n\t\t  data.data.subdistricts.map(subdistrict => ({\n\t\t\t  label: subdistrict.name,\n\t\t\t  value: subdistrict.id\n\t\t  }))\n\t  );\n  };\n\n\thandleChange = selected => value => {\n\t\tthis.setState({ [selected]: value })\n\t};\n\n\n\trender() {\n\t  const {\n\t  \tprovinces,\n\t\t  cities,\n\t\t  districts,\n\t\t  subDistricts,\n\t\t  selectedProvince,\n\t\t  selectedCity,\n\t\t  selectedDistrict,\n\t\t  selectedSubDistrics\n\t  } = this.state;\n    return (\n      <div>\n\t      <Suspense fallback={<div>Loading...</div>}>\n\t\t      <CustomSelect\n\t\t\t      label={\"Province\"}\n\t\t\t      value={selectedProvince}\n\t\t\t      options={provinces}\n\t\t\t      handleChange={this.handleChange('selectedProvince')}\n\t\t\t      isLoading={provinces.length === 0}\n\t\t\t      isDisabled={false}\n\t\t      />\n\t\t      <CustomSelect\n\t\t\t      label={\"Cities\"}\n\t\t\t      value={selectedCity}\n\t\t\t      options={cities}\n\t\t\t      handleChange={this.handleChange('selectedCity')}\n\t\t\t      isLoading={cities.length === 0}\n\t\t\t      isDisabled={!selectedProvince.value}\n\t\t      />\n\t\t      <CustomSelect\n\t\t\t      label={\"Districts\"}\n\t\t\t      value={selectedDistrict}\n\t\t\t      options={districts}\n\t\t\t      handleChange={this.handleChange('selectedDistrict')}\n\t\t\t      isLoading={districts.length === 0}\n\t\t\t      isDisabled={!selectedCity.value}\n\t\t      />\n\t\t      <CustomSelect\n\t\t\t      label={\"SubDistricts\"}\n\t\t\t      value={selectedSubDistrics}\n\t\t\t      options={subDistricts}\n\t\t\t      handleChange={this.handleChange('selectedSubDistrics')}\n\t\t\t      isLoading={subDistricts.length === 0}\n\t\t\t      isDisabled={!selectedDistrict.value}\n\t\t      />\n\t      </Suspense>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}